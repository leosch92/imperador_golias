{
// Command calculator is a small PEG-generated parser that computes
// simple math using integers.
//
// Example usage: $ calculator "3 + (2 - 5 * 12)"
//
// Inspired by pegjs arithmetic example:
// https://github.com/pegjs/pegjs/blob/master/examples/arithmetics.pegjs
//
package main

type Tree struct {
	Left  *Tree
	Value string
	Right *Tree
}

func main() {
    if len(os.Args) != 2 {
        log.Fatal("Usage: calculator 'EXPR'")
    }
    got, err := ParseReader("", strings.NewReader(os.Args[1]))
    if err != nil {
        log.Fatal(err)
    }
    t := got.(Tree)
	printTree(&t)
}

func toIfaceSlice(v interface{}) []interface{} {
    if v == nil {
        return nil
    }
    return v.([]interface{})
}

func eval(first, rest interface{}) Tree {
    t := Tree{Left: nil, Value: first.(string), Right: nil}
    restSl := toIfaceSlice(rest)
    for _, v := range restSl {
        restExpr := toIfaceSlice(v)
        r := restExpr[3].(string)
        op := restExpr[1].(string)
        rightTree := t
        leftTree := Tree{Left: nil, Value: r, Right: nil}
        t = Tree{Left: &leftTree, Value: op, Right: &rightTree}
    }
    return t
}

func findMinMax(tree *Tree, min *int, max *int, hd int) {
	if tree == nil {
		return
	}

	if hd < *min {
		*min = hd
	} else if hd > *max {
		*max = hd
	}

	findMinMax(tree.Left, min, max, hd-1)
	findMinMax(tree.Right, min, max, hd+1)
}

func (t *Tree) insertLeft(Value string) *Tree {
	t.Left = &Tree{nil, Value, nil}
	return t.Left
}

func (t *Tree) insertRight(Value string) *Tree {
	t.Right = &Tree{nil, Value, nil}
	return t.Right
}

func printer(w io.Writer, tree *Tree, ns int, ch rune) {
	if tree == nil {
		return
	}

	for i := 0; i < ns; i++ {
		fmt.Fprint(w, " ")
	}
	fmt.Fprintf(w, "%c:%v\n", ch, tree.Value)
	printer(w, tree.Left, ns+2, 'E')
	printer(w, tree.Right, ns+2, 'D')
}

func printTree(tree *Tree) {
	printer(os.Stdout, tree, 0, 'R')
}

}

Input <- expr:Expr EOF {
    return expr, nil
}

Expr <- _ first:Integer rest:( _ AddOp _ Integer )* _ {
    return eval(first, rest), nil
}

AddOp <- '+' {
    return string(c.text), nil
}

Integer <- '-'? [0-9]+ {
    return string(c.text), nil
}

_ "whitespace" <- [ \n\t\r]*

EOF <- !.
