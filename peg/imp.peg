//
// PEG para golang visando a compilação e interpretação de código
// fonte na linguagem IMP
//

{
    package main
}

Input <- _ cl: Clauses _ EOF {
    return cl, nil
}


Clauses <- variable:(Variable _ ';' _ )?  constant:(Constant _ ';' _ )?
           init:(Initialization _ ';' )? procs:( _ Procedure )+ calls:( _ Call )* {
    return constructClauses(variable, constant, init, procs, calls), nil
}

Procedure <- "proc" __ id:Identifier '(' formals: Formals ')' _ blk: Block{
    return constructProcedure(id, formals, blk), nil
}

Formals <- first:Identifier rest:(',' _ Identifier )* {
    return constructFormals(first, rest), nil
} / "" {
    return nil, nil
}

Call <- "exec" __ id:Identifier '(' actuals: Actuals ')' {
    return constructCall(id, actuals), nil
}

Actuals <- first:Expression rest:( ',' _ Expression )* {
    return constructActuals(first, rest), nil
} / "" {
    return nil, nil
}

Variable <- "var" __ id:Identifier rest:( _ ',' _ Identifier )* {
    return evalClauseDeclaration(id, rest), nil
}

Constant <- "const" __ id:Identifier rest:( _ ',' _ Identifier )* {
    return evalClauseDeclaration(id, rest), nil
}

Initialization <- "init" __ sInit:SingleInit rest:( _ ',' _ SingleInit )* {
    return evalInitialization(sInit, rest), nil
}

SingleInit <- id: Identifier _ '=' _ expr:(Expression / Text) {
    return evalSingleInit(id, expr), nil
}

Command <- While /
           If /
           Print /
           Assignment /
           Call

Sequence <- first:Command rest:( _ ';' _ Command )+ {
    return evalSequence(first, rest), nil
}

Assignment <- id:Identifier _ ":=" _ expr:(Expression / Text) {
    return evalAssignment(id, expr), nil
}

While <- "while" __ '(' _ boolExp:BoolExp _ ')' __ "do" _ body:Block {
    return evalWhile(boolExp, body), nil
}

If <- "if" _ '(' _ boolExp:BoolExp _ ')' _ ifBody:Block _ elseStatement:("else" _ Block)? {
    return evalIf(boolExp, ifBody, elseStatement), nil
}

Print <- "print" _ '(' _ exp:(Expression / Text / Real) _ ')' {
    return evalPrint(exp), nil
}

Block <- '{' _ decl:(DeclarationSequence _ ';' _ )? cmd: ( Sequence / Command )  _ '}' {
    return evalBlock(decl, cmd), nil
}

DeclarationSequence <- first: Declaration _ ';' _ rest:( DeclarationSequence / Declaration ) {
    return evalDeclarationSequence(first, rest), nil
} / Declaration

Declaration <- declOp:DeclOp __ initSeq:InitSeq {
    return evalDeclaration(declOp, initSeq), nil
}

InitSeq <- sInit:SingleInit rest:( _ ',' _ SingleInit )* {
    return evalInitialization(sInit, rest), nil
}

DeclOp <- ("var" / "const") {
    return string(c.text), nil
}

Expression <- ArithExpr /
              BoolExp

ArithExpr <- first:Term rest:( _ AddOp _ Term )* {
    return evalArithExpr(first, rest), nil
}

Term <- first:Factor rest:( _ MulOp _ Factor )* {
    return evalArithExpr(first, rest), nil
}

Factor <- '(' expr:ArithExpr ')' {
    return expr, nil
} / integer:Integer {
    return integer, nil
} / id: Identifier {
    return id, nil
}

AddOp <- ('+' / '-' ) {
    return string(c.text), nil
}

MulOp <- ( '*' / '/' ) {
    return string(c.text), nil
}

BoolExp <- keyword: KeywordBoolExp {
    return evalKeywordBoolExp(keyword), nil
}
/ unBoolOp: UnaryBoolOp boolExp: BoolExp {
    return evalUnaryBoolExp(unBoolOp, boolExp), nil
}
/ id1: Identifier _ binBoolOp: BinaryBoolOp _ id2: Identifier {
    return evalBinaryLogicExp(binBoolOp, id1, id2), nil
}
/ id1: Identifier _ binBoolOp: BinaryBoolOp _ id2:ArithExpr {
    return evalBinaryArithExp(binBoolOp, id1, id2), nil
}

KeywordBoolExp <- ("true" / "false") {
    return string(c.text), nil
}

UnaryBoolOp <- '~'{
    return string(c.text), nil
}

BinaryBoolOp <- ( "==" / "<=" / ">=" / "<" / ">" / "/\\" / "\\/") {
    return string(c.text), nil
}

Identifier <- [a-zA-Z][0-9a-zA-Z]*{
    return string(c.text), nil
}

Integer <- '-'? [0-9]+ {
    return string(c.text), nil
}

Real <- ('+' / '-')? [0-9]+ '.' [0-9]+ {
    return string(c.text), nil
}

Text ← '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    return string(c.text), nil
}

EscapedChar ← [\x00-\x1f"\\]

EscapeSequence ← SingleCharEscape / UnicodeEscape

SingleCharEscape ← ["\\/bfnrt]

UnicodeEscape ← 'u' HexDigit HexDigit HexDigit HexDigit

HexDigit ← [0-9a-f]i


_ "whitespace" <- [ \n\t\r]*
__ "obligatory_whitespace" <- [ \n\t\r]+

EOF <- !.
